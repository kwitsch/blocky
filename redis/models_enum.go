// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package redis

import (
	"fmt"
	"strings"
)

const (
	// ChannelNameBlockyWorkerNeogation is a ChannelName of type blocky_worker_neogation.
	// channel to determin which block instance should act as worker
	ChannelNameBlockyWorkerNeogation ChannelName = "blocky_worker_neogation"
)

var ErrInvalidChannelName = fmt.Errorf("not a valid ChannelName, try [%s]", strings.Join(_ChannelNameNames, ", "))

var _ChannelNameNames = []string{
	string(ChannelNameBlockyWorkerNeogation),
}

// ChannelNameNames returns a list of possible string values of ChannelName.
func ChannelNameNames() []string {
	tmp := make([]string, len(_ChannelNameNames))
	copy(tmp, _ChannelNameNames)
	return tmp
}

// String implements the Stringer interface.
func (x ChannelName) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ChannelName) IsValid() bool {
	_, err := ParseChannelName(string(x))
	return err == nil
}

var _ChannelNameValue = map[string]ChannelName{
	"blocky_worker_neogation": ChannelNameBlockyWorkerNeogation,
}

// ParseChannelName attempts to convert a string to a ChannelName.
func ParseChannelName(name string) (ChannelName, error) {
	if x, ok := _ChannelNameValue[name]; ok {
		return x, nil
	}
	return ChannelName(""), fmt.Errorf("%s is %w", name, ErrInvalidChannelName)
}

// MarshalText implements the text marshaller method.
func (x ChannelName) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ChannelName) UnmarshalText(text []byte) error {
	tmp, err := ParseChannelName(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// KeyCategoryCache is a KeyCategory of type cache.
	// cache entries
	KeyCategoryCache KeyCategory = "cache"
	// KeyCategoryConfig is a KeyCategory of type config.
	// config entries
	KeyCategoryConfig KeyCategory = "config"
	// KeyCategoryLock is a KeyCategory of type lock.
	// locks
	KeyCategoryLock KeyCategory = "lock"
	// KeyCategoryLog is a KeyCategory of type log.
	// logs
	KeyCategoryLog KeyCategory = "log"
)

var ErrInvalidKeyCategory = fmt.Errorf("not a valid KeyCategory, try [%s]", strings.Join(_KeyCategoryNames, ", "))

var _KeyCategoryNames = []string{
	string(KeyCategoryCache),
	string(KeyCategoryConfig),
	string(KeyCategoryLock),
	string(KeyCategoryLog),
}

// KeyCategoryNames returns a list of possible string values of KeyCategory.
func KeyCategoryNames() []string {
	tmp := make([]string, len(_KeyCategoryNames))
	copy(tmp, _KeyCategoryNames)
	return tmp
}

// String implements the Stringer interface.
func (x KeyCategory) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x KeyCategory) IsValid() bool {
	_, err := ParseKeyCategory(string(x))
	return err == nil
}

var _KeyCategoryValue = map[string]KeyCategory{
	"cache":  KeyCategoryCache,
	"config": KeyCategoryConfig,
	"lock":   KeyCategoryLock,
	"log":    KeyCategoryLog,
}

// ParseKeyCategory attempts to convert a string to a KeyCategory.
func ParseKeyCategory(name string) (KeyCategory, error) {
	if x, ok := _KeyCategoryValue[name]; ok {
		return x, nil
	}
	return KeyCategory(""), fmt.Errorf("%s is %w", name, ErrInvalidKeyCategory)
}

// MarshalText implements the text marshaller method.
func (x KeyCategory) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *KeyCategory) UnmarshalText(text []byte) error {
	tmp, err := ParseKeyCategory(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
